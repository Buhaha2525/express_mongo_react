pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/Buhaha2525/express_mongo_react.git'
            }
        }
        
        stage('Cleanup Existing Containers') {
            steps {
                sh '''
                    echo "üßπ Nettoyage des conteneurs existants..."
                    
                    # Arr√™ter et supprimer les conteneurs sp√©cifiques
                    docker stop mongo 2>/dev/null || echo "Aucun conteneur mongo √† arr√™ter"
                    docker rm mongo 2>/dev/null || echo "Aucun conteneur mongo √† supprimer"
                    
                    docker stop express-api 2>/dev/null || echo "Aucun conteneur express-api √† arr√™ter"
                    docker rm express-api 2>/dev/null || echo "Aucun conteneur express-api √† supprimer"
                    
                    docker stop react-frontend 2>/dev/null || echo "Aucun conteneur react-frontend √† arr√™ter"
                    docker rm react-frontend 2>/dev/null || echo "Aucun conteneur react-frontend √† supprimer"
                    
                    # Nettoyage complet avec docker compose
                    docker compose down 2>/dev/null || echo "docker compose down √©chou√© ou non disponible"
                    
                    # Supprimer les conteneurs orphelins
                    docker ps -aq --filter "status=exited" | xargs docker rm 2>/dev/null || true
                '''
            }
        }
        
        stage('Build Images') {
            steps {
                sh '''
                    echo "üî® Construction des images..."
                    docker compose build --no-cache
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                sh '''
                    echo "üöÄ D√©ploiement en cours..."
                    docker compose up -d
                    
                    echo "‚è≥ Attente du d√©marrage..."
                    sleep 30
                    
                    echo "üìä √âtat des conteneurs:"
                    docker compose ps
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                sh '''
                    echo "üè• V√©rification de la sant√© des services..."
                    
                    # V√©rifier que les conteneurs sont en cours d'ex√©cution
                    if docker compose ps | grep -q "Up"; then
                        echo "‚úÖ Tous les services sont en cours d'ex√©cution"
                    else
                        echo "‚ùå Certains services ne sont pas d√©marr√©s"
                        docker compose ps
                        exit 1
                    fi
                    
                    # Test simple de connectivit√©
                    echo "üîó URLs de l'application:"
                    echo "Frontend: http://localhost:5173"
                    echo "Backend: http://localhost:5001/api"
                    echo "MongoDB: localhost:27017"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üìù Pipeline termin√© - v√©rifiez les logs ci-dessus'
            sh '''
                echo "üìã √âtat final des conteneurs:"
                docker compose ps || true
                echo "üîç Derniers logs:"
                docker compose logs --tail=20 || true
            '''
        }
        success {
            script {
                echo '‚úÖ D√©ploiement r√©ussi!'
                // R√©cup√©rer l'√©tat des conteneurs pour l'email
                def containerStatus = sh(script: 'docker compose ps', returnStdout: true)
                
                emailext (
                    subject: "‚úÖ SUCC√àS - D√©ploiement ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    <html>
                    <body>
                    <h2>üöÄ D√©ploiement R√©ussi!</h2>
                    
                    <p>Le pipeline <strong>${env.JOB_NAME}</strong> s'est termin√© avec succ√®s.</p>
                    
                    <h3>üìä D√©tails de la build:</h3>
                    <ul>
                        <li><strong>Build:</strong> #${env.BUILD_NUMBER}</li>
                        <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                        <li><strong>URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                        <li><strong>Date:</strong> ${new Date().format("dd/MM/yyyy √† HH:mm")}</li>
                    </ul>
                    
                    <h3>üåê Application d√©ploy√©e:</h3>
                    <ul>
                        <li><strong>Frontend React:</strong> <a href="http://localhost:5173">http://localhost:5173</a></li>
                        <li><strong>Backend Express:</strong> <a href="http://localhost:5001/api">http://localhost:5001/api</a></li>
                        <li><strong>MongoDB:</strong> localhost:27017</li>
                    </ul>
                    
                    <h3>üêã Conteneurs Docker:</h3>
                    <pre>${containerStatus}</pre>
                    
                    <p style="color: green; font-weight: bold;">‚úÖ Tous les services sont op√©rationnels</p>
                    
                    <hr>
                    <p><small>Email envoy√© automatiquement par Jenkins</small></p>
                    </body>
                    </html>
                    """,
                    to: "sowdmzz@gmail.com",
                    mimeType: "text/html"
                )
            }
        }
        failure {
            script {
                echo '‚ùå √âchec du d√©ploiement'
                // R√©cup√©rer les logs d'erreur
                def errorLogs = sh(script: 'docker compose logs --tail=50 2>/dev/null || echo "Impossible de r√©cup√©rer les logs"', returnStdout: true)
                
                emailext (
                    subject: "‚ùå √âCHEC - D√©ploiement ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    <html>
                    <body>
                    <h2>üí• √âchec du D√©ploiement</h2>
                    
                    <p>Le pipeline <strong>${env.JOB_NAME}</strong> a √©chou√©.</p>
                    
                    <h3>üìä D√©tails de la build:</h3>
                    <ul>
                        <li><strong>Build:</strong> #${env.BUILD_NUMBER}</li>
                        <li><strong>Job:</strong> ${env.JOB_NAME}</li>
                        <li><strong>URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></li>
                        <li><strong>Date:</strong> ${new Date().format("dd/MM/yyyy √† HH:mm")}</li>
                    </ul>
                    
                    <h3>üîç Logs d'erreur:</h3>
                    <pre style="background-color: #f8f8f8; padding: 10px; border-left: 4px solid #ff0000;">
                    ${errorLogs}
                    </pre>
                    
                    <p style="color: red; font-weight: bold;">‚ùå Une intervention est n√©cessaire</p>
                    
                    <hr>
                    <p><small>Email envoy√© automatiquement par Jenkins</small></p>
                    </body>
                    </html>
                    """,
                    to: "sowdmzz@gmail.com",
                    mimeType: "text/html"
                )
            }
        }
        unstable {
            emailext (
                subject: "‚ö†Ô∏è INSTABLE - D√©ploiement ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Le pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} est instable.\n\nD√©tails: ${env.BUILD_URL}",
                to: "sowdmzz@gmail.com"
            )
        }
    }
}
