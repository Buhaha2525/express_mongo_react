pipeline {
    agent {
        kubernetes {
            cloud 'minikube-k8s'
            label "jenkins-agent-${BUILD_NUMBER}"
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent-${BUILD_NUMBER}
  labels:
    app: jenkins-agent
spec:
  serviceAccountName: jenkins-agent
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:4.11.2-4
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    workingDir: /home/jenkins/agent
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  - name: node
    image: node:18-alpine
    command: ['cat']
    tty: true
    workingDir: /home/jenkins/agent
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock

  - name: docker
    image: docker:24.0.7-cli-alpine
    command: ['cat']
    tty: true
    workingDir: /home/jenkins/agent
    env:
    - name: DOCKER_HOST
      value: unix:///var/run/docker.sock
    securityContext:
      privileged: true
    resources:
      requests:
        memory: "512Mi"
        cpu: "300m"
      limits:
        memory: "1Gi"
        cpu: "500m"
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock

  - name: kubectl
    image: bitnami/kubectl:1.28
    command: ['cat']
    tty: true
    workingDir: /home/jenkins/agent
    resources:
      requests:
        memory: "256Mi"
        cpu: "200m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }

    environment {
        // Docker Registry
        DOCKER_REGISTRY = 'dmzz'
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/express-frontend"
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/express-backend"
        
        // Kubernetes
        K8S_NAMESPACE = 'express-app'
        
        // Build info
        BUILD_TAG = "build-${BUILD_NUMBER}"
    }

    stages {
        stage('Debug et Verification') {
            steps {
                container('node') {
                    script {
                        echo "üîç D√©marrage du pipeline - Debug information"
                        sh '''
                            echo "=== Informations syst√®me ==="
                            echo "Build: ${BUILD_NUMBER}"
                            echo "Workspace: ${WORKSPACE}"
                            echo "=== Outils disponibles ==="
                            node --version
                            npm --version
                            docker --version
                            kubectl version --client
                            echo "=== Structure du projet ==="
                            ls -la
                        '''
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                container('node') {
                    checkout scm
                    sh '''
                        echo "üì¶ Code checkout complet"
                        git log -1 --oneline
                    '''
                }
            }
        }

        stage('Installation des D√©pendances') {
            parallel {
                stage('Frontend Dependencies') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üì¶ Installation des d√©pendances Frontend..."
                                cd front-end
                                npm ci --silent
                                echo "‚úÖ D√©pendances Frontend install√©es"
                            '''
                        }
                    }
                }
                stage('Backend Dependencies') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üì¶ Installation des d√©pendances Backend..."
                                cd back-end
                                npm ci --silent
                                echo "‚úÖ D√©pendances Backend install√©es"
                            '''
                        }
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('Tests Backend') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üß™ Ex√©cution des tests Backend..."
                                cd back-end
                                npm test -- --watchAll=false --passWithNoTests || echo "‚ÑπÔ∏è Tests termin√©s"
                                echo "‚úÖ Tests Backend termin√©s"
                            '''
                        }
                    }
                }
                stage('Tests Frontend') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üß™ Ex√©cution des tests Frontend..."
                                cd front-end
                                npm test -- --watchAll=false --passWithNoTests || echo "‚ÑπÔ∏è Tests termin√©s"
                                echo "‚úÖ Tests Frontend termin√©s"
                            '''
                        }
                    }
                }
            }
        }

        stage('Build des Applications') {
            parallel {
                stage('Build Frontend') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üèóÔ∏è Building Frontend..."
                                cd front-end
                                npm run build
                                echo "‚úÖ Frontend build r√©ussi"
                                ls -la dist/
                            '''
                        }
                    }
                }
                stage('Build Backend') {
                    steps {
                        container('node') {
                            sh '''
                                echo "üèóÔ∏è Pr√©paration Backend..."
                                cd back-end
                                # V√©rifier que le code est pr√™t
                                ls -la
                                echo "‚úÖ Backend pr√™t pour le d√©ploiement"
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Images Docker') {
            steps {
                container('docker') {
                    script {
                        echo "üê≥ Construction des images Docker..."
                        
                        // Build Frontend
                        sh """
                            echo "üì¶ Construction de l'image Frontend..."
                            docker build -t ${FRONTEND_IMAGE}:${BUILD_TAG} -t ${FRONTEND_IMAGE}:latest ./front-end
                            echo "‚úÖ Image Frontend construite: ${FRONTEND_IMAGE}:${BUILD_TAG}"
                        """
                        
                        // Build Backend
                        sh """
                            echo "üì¶ Construction de l'image Backend..."
                            docker build -t ${BACKEND_IMAGE}:${BUILD_TAG} -t ${BACKEND_IMAGE}:latest ./back-end
                            echo "‚úÖ Image Backend construite: ${BACKEND_IMAGE}:${BUILD_TAG}"
                        """
                        
                        // Lister les images
                        sh """
                            echo "üìã Images Docker construites:"
                            docker images | grep "${DOCKER_REGISTRY}"
                        """
                    }
                }
            }
        }

        stage('D√©ploiement MongoDB') {
            steps {
                container('kubectl') {
                    script {
                        echo "üóÑÔ∏è D√©ploiement de MongoDB..."
                        
                        // Cr√©er le namespace
                        sh """
                            kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        """
                        
                        // D√©ployer MongoDB
                        sh """
                            kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: ${K8S_NAMESPACE}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: ${K8S_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_DATABASE
          value: "smartphoneDB"
        volumeMounts:
        - name: mongo-storage
          mountPath: /data/db
      volumes:
      - name: mongo-storage
        persistentVolumeClaim:
          claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: ${K8S_NAMESPACE}
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017
EOF
                        """
                        
                        // Attendre que MongoDB soit pr√™t
                        sh """
                            echo "‚è≥ Attente du d√©marrage de MongoDB..."
                            kubectl wait --for=condition=ready pod -l app=mongo -n ${K8S_NAMESPACE} --timeout=120s
                            echo "‚úÖ MongoDB est pr√™t"
                        """
                    }
                }
            }
        }

        stage('D√©ploiement Applications') {
            steps {
                container('kubectl') {
                    script {
                        echo "üöÄ D√©ploiement des applications..."
                        
                        // Mettre √† jour et d√©ployer le Backend
                        sh """
                            echo "üîß D√©ploiement du Backend..."
                            # Mettre √† jour l'image dans le manifeste existant
                            sed -i 's|image:.*|image: ${BACKEND_IMAGE}:${BUILD_TAG}|g' back-end/k8s-deployment.yaml
                            
                            # Appliquer le d√©ploiement
                            kubectl apply -f back-end/k8s-deployment.yaml -n ${K8S_NAMESPACE}
                            echo "‚úÖ Backend d√©ploy√© avec l'image: ${BACKEND_IMAGE}:${BUILD_TAG}"
                        """
                        
                        // Mettre √† jour et d√©ployer le Frontend
                        sh """
                            echo "üîß D√©ploiement du Frontend..."
                            # Mettre √† jour l'image dans le manifeste existant
                            sed -i 's|image:.*|image: ${FRONTEND_IMAGE}:${BUILD_TAG}|g' front-end/k8s-deployment.yaml
                            
                            # Appliquer le d√©ploiement
                            kubectl apply -f front-end/k8s-deployment.yaml -n ${K8S_NAMESPACE}
                            echo "‚úÖ Frontend d√©ploy√© avec l'image: ${FRONTEND_IMAGE}:${BUILD_TAG}"
                        """
                    }
                }
            }
        }

        stage('V√©rification du D√©ploiement') {
            steps {
                container('kubectl') {
                    script {
                        echo "üîç V√©rification du d√©ploiement..."
                        
                        // Attendre que les pods soient pr√™ts
                        sh """
                            echo "‚è≥ Attente du d√©marrage des pods..."
                            kubectl wait --for=condition=ready pod -l app=express-backend -n ${K8S_NAMESPACE} --timeout=180s
                            kubectl wait --for=condition=ready pod -l app=react-frontend -n ${K8S_NAMESPACE} --timeout=180s
                            echo "‚úÖ Tous les pods sont pr√™ts"
                        """
                        
                        // Afficher l'√©tat du d√©ploiement
                        sh """
                            echo "=== √âtat du d√©ploiement ==="
                            kubectl get all -n ${K8S_NAMESPACE}
                            
                            echo "=== D√©tails des pods ==="
                            kubectl get pods -n ${K8S_NAMESPACE} -o wide
                            
                            echo "=== Services ==="
                            kubectl get services -n ${K8S_NAMESPACE}
                            
                            echo "=== Logs Backend (extrait) ==="
                            kubectl logs -n ${K8S_NAMESPACE} -l app=express-backend --tail=10 || echo "Logs backend non disponibles"
                            
                            echo "=== Logs Frontend (extrait) ==="
                            kubectl logs -n ${K8S_NAMESPACE} -l app=react-frontend --tail=10 || echo "Logs frontend non disponibles"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üìä G√©n√©ration du rapport final..."
            container('kubectl') {
                sh '''
                    echo "=== RAPPORT FINAL ==="
                    echo "üì¶ Namespace: ${K8S_NAMESPACE}"
                    echo "üî¢ Build: ${BUILD_NUMBER}"
                    echo ""
                    echo "=== R√âSUM√â DES D√âPLOIEMENTS ==="
                    kubectl get deployments -n ${K8S_NAMESPACE}
                    echo ""
                    echo "=== R√âSUM√â DES SERVICES ==="
                    kubectl get services -n ${K8S_NAMESPACE}
                    echo ""
                    echo "=== R√âSUM√â DES PODS ==="
                    kubectl get pods -n ${K8S_NAMESPACE} -o wide
                    
                    # Obtenir l'URL du LoadBalancer
                    echo ""
                    echo "üåê URLS D'ACC√àS:"
                    FRONTEND_IP=$(kubectl get svc frontend-service -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "En attente...")
                    FRONTEND_PORT=$(kubectl get svc frontend-service -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].port}' 2>/dev/null || echo "80")
                    
                    if [ "$FRONTEND_IP" != "En attente..." ]; then
                        echo "   Frontend: http://${FRONTEND_IP}:${FRONTEND_PORT}"
                        echo "   Backend API: http://${FRONTEND_IP}:${FRONTEND_PORT}/api"
                    else
                        # Fallback sur Minikube
                        MINIKUBE_IP=$(minikube ip 2>/dev/null || echo "localhost")
                        NODE_PORT=$(kubectl get svc frontend-service -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30000")
                        echo "   Frontend: http://${MINIKUBE_IP}:${NODE_PORT}"
                        echo "   Backend API: http://${MINIKUBE_IP}:${NODE_PORT}/api"
                    fi
                    echo "   MongoDB: mongodb://mongo-service:27017/smartphoneDB"
                '''
            }
        }
        
        success {
            echo 'üéâ D√©ploiement r√©ussi! Votre application est en ligne.'
            script {
                // Obtenir l'URL d'acc√®s
                def frontendIp = sh(script: '''
                    kubectl get svc frontend-service -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo ""
                ''', returnStdout: true).trim()
                
                def accessUrl = ""
                if (frontendIp) {
                    accessUrl = "http://${frontendIp}"
                } else {
                    def minikubeIp = sh(script: 'minikube ip 2>/dev/null || echo "localhost"', returnStdout: true).trim()
                    def nodePort = sh(script: 'kubectl get svc frontend-service -n ${K8S_NAMESPACE} -o jsonpath=\'{.spec.ports[0].nodePort}\' 2>/dev/null || echo "30000"', returnStdout: true).trim()
                    accessUrl = "http://${minikubeIp}:${nodePort}"
                }
                
                emailext (
                    subject: "‚úÖ SUCC√àS - D√©ploiement ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    Le pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} a r√©ussi.

                    üìä RAPPORT DE D√âPLOIEMENT:
                    - Application: Express + React + MongoDB
                    - Namespace: ${K8S_NAMESPACE}
                    - Build: ${BUILD_NUMBER}
                    - Statut: ‚úÖ SUCC√àS

                    üåê URL D'ACC√àS:
                    ${accessUrl}

                    üìã R√âSUM√â KUBERNETES:
                    ${sh(script: 'kubectl get pods -n ${K8S_NAMESPACE} -o wide | tail -n +2', returnStdout: true).trim()}

                    Bonne journ√©e!
                    """,
                    to: "sowdmzz@gmail.com"
                )
            }
        }
        
        failure {
            echo '‚ùå √âchec du d√©ploiement. V√©rifiez les logs.'
            container('kubectl') {
                sh '''
                    echo "üêõ Debug information:"
                    echo "=== √âv√©nements r√©cents ==="
                    kubectl get events -n ${K8S_NAMESPACE} --sort-by=.lastTimestamp | tail -20 || true
                    
                    echo "=== Description des pods en √©chec ==="
                    kubectl describe pods -n ${K8S_NAMESPACE} --selector=app!=mongo || true
                '''
            }
        }
        
        cleanup {
            echo "üßπ Nettoyage des ressources temporaires..."
            sh '''
                docker system prune -f 2>/dev/null || true
            '''
        }
    }
}
